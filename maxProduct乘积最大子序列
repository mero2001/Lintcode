public class Solution {
    /*
     * @param nums: An array of integers
     * @return: An integer
     */
    public int maxProduct(int[] nums) {
        // write your code here
        //访问到每个点的时候，以该点为子序列的末尾的乘积，要么是该点本身，要么是该点乘以以前一点为末尾的序列，注意乘积负负得正，故需要记录前面的最大最小值。
        int len=nums.length;
        if(len==1){
            return nums[0];
        }
        
        int posmax=nums[0];
        int negmax=nums[0];
        int ret=nums[0];
        
        for(int i=1;i<nums.length;i++){
            int tmppos=posmax;
            int tmpneg=negmax;
            
            posmax=Math.max(nums[i],Math.max(tmppos*nums[i],tmpneg*nums[i]));
            negmax=Math.min(nums[i],Math.min(tmppos*nums[i],tmpneg*nums[i]));
            ret = Math.max(ret,posmax);//需要每次都进行ret和posmax的比较，存放max
        }
        
        return ret;
    }
}
