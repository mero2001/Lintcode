public class Solution {
    /*
     * @param nums: A list of integers
     * @return: A list of integers
     */
    public int[] nextPermutation(int[] nums) {
        // write your code here
        int len=nums.length;//计算数组长度
        
        for(int i=len-1;i>=1;i--){//从右向左
            int j=i;
            if(nums[j]>nums[j-1]){//如果nums[j]>nums[j-1]，直接将两者调换顺序并返回
                int temp=nums[j];
                nums[j]=nums[j-1];
                nums[j-1]=temp;
                return nums;
            }
            while(j>=1&&nums[j]<=nums[j-1]){//从右向左寻找第一个nums[j]>nums[j-1]的数
                j--;
            }
            if(j==0){//当j=0时，说明该数组为降序排列，返回升序排列
                for(int m=0;m<len/2;m++){
                    int temp=nums[m];
                    nums[m]=nums[len-m-1];
                    nums[len-m-1]=temp;
                    System.out.println(nums[m]);
                }
                return nums;
            }
            for(int m=len-1;m>=j;m--){//将nums[len-1]到nums[j]里的数去和nums[j-1]比较。其中比nums[j-1]大的最小数与nums[j-1]交换顺序
                if(nums[m]>nums[j-1]){
                    int temp=nums[m];
                    nums[m]=nums[j-1];
                    nums[j-1]=temp;
                    System.out.println(nums[m]);
                    break;
                }
            }
            for(int m=j;m<j+(len-j)/2;m++){//将交换顺序后右边的数组升序排列
                int temp=nums[m];
                nums[m]=nums[len-m+j-1];
                nums[len-m+j-1]=temp;
            }
            return nums;
            //i--;
        }
        return nums;
    }
}
