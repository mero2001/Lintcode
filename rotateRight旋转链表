/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param head: the List
     * @param k: rotate to the right k places
     * @return: the list after rotation
     */
    public ListNode rotateRight(ListNode head, int k) {
        // write your code here
        if(head==null||head.next==null){//head==null||head.next==null时，直接返回head
            return head;
        }
        /*ListNode dummy=head;
        
        
        System.out.println(length);
        
        int k2=k%length;
        if(k2==0){
            return head;
        }
        
        dummy=head;
        int count=1;
        while(count<k2){
            dummy=dummy.next;
            count++;
        }
    
        
        ListNode reHead=dummy;
        while(dummy.next!=null){
            dummy=dummy.next;
        }
        dummy.next=head;
        count=0;
        while(count<length-k2){
            head=head.next;
        }
        head.next=null;
        return reHead;*/
        ListNode dummy=head;
        int length=1;
        while(dummy.next!=null){//计算链表长度
            length++;
            dummy=dummy.next;
            
        }
        k=k%length;//k对链表长度取余并赋值给k
        if(k==0){
            return head;
        }
        dummy=head;
        int count=1;
        while(dummy.next!=null&&count<length-k){//寻找rehead
            count++;
            dummy=dummy.next;
        }
        /*ListNode tail=dummy;
        tail.next=null;*/
        ListNode rehead=dummy.next;
        
        while(dummy.next!=null){
            dummy=dummy.next;
        }
        dummy.next=head;//连接dummy和head
        count=1;
        while(head.next!=null&&count<length-k){
            count++;
            head=head.next;
        }
        
        head.next=null;//截断链表
        return rehead;
        
    }
}
