/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param l1: ListNode l1 is the head of the linked list
     * @param l2: ListNode l2 is the head of the linked list
     * @return: ListNode head of linked list
     */
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // write your code here
        
        if(l1==null){//判断l1和l2是否为null
            return l2;
        }
        if(l2==null){
            return l1;
        }
        
        ListNode tempNode=new ListNode(-1);//新建合并链表
        ListNode node=tempNode;//指向合并链表的第一个node
        
        if(l1.val<l2.val){//定义链表第一个节点tempNode
            tempNode=l1;
            l1=l1.next;
        }
        else{
            tempNode=l2;
            l2=l2.next;
        }
        node=tempNode;
        
        while(l1!=null&&l2!=null){//依次向合并链表中添加元素
            if(l1.val<l2.val){
                node.next=l1;
                l1=l1.next;
            }else{
                node.next=l2;
                l2=l2.next;
            }
            node=node.next;
        }
        
        if(l1==null){//添加剩余元素
            node.next=l2;
        }
        if(l2==null){
            node.next=l1;
        }
        return tempNode;
        
        /*while(node2.val<node1.val){
                temp2=node2.next;
                node2.next=l1;
                node1=l1;
                l1=node2;
                node2=temp2;
            }
        
        while(node2.val<=node1.val){
                temp2=node2.next;
                node2.next=node1;
                node2=temp2;
        }
        
        while(node2.next!=null){
            

            //if(node2.val>=node1.val){
            while(node1.next!=null&&node2.val>=node1.next.val){
                node1=node1.next;
            }
            if(node1.next!=null){
            temp1=node1.next;
            temp2=node2.next;
            node1.next=node2;
            node2.next=temp1;
            node2=temp2;
            }
            if(node1.next==null){
                node1.next=node2;
                node2=node2.next;
            }
            //}
        }
        if(node2.next==null){
            while(node1.next!=null&&node2.val>=node1.next.val){
                node1=node1.next;
            }
            temp1=node1.next;
            node1.next=node2;
            node2.next=temp1;
        }
        
        return l1;    */
        
    }
}
