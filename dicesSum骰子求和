public class Solution {
    /**
     * @param n an integer
     * @return a list of Map.Entry<sum, probability>
     */
    public List<Map.Entry<Integer, Double>> dicesSum(int n) {
        // Write your code here
        // Ps. new AbstractMap.SimpleEntry<Integer, Double>(sum, pro)
        // to create the pair
        Map<Integer,Double> map=new HashMap();
        List<Map.Entry<Integer,Double>> list=new ArrayList();
        
       /* if(n==1){
            for(int i=1;i<=6;i++){
                double p=1/6;
                map.add(i,p);
                
            }
            
            Iterator iterator=map.entrySet().iterator();
            while(iterator.hasNext()){
                Map.Entry entry=(Map.Entry)iterator.next();
                list.add(entry);
            }
            
            return list;
            
        }*/
        
        double[][] dp=new double[n+1][6*n+1];
        
        dp[1][1]=1;
        dp[1][2]=1;
        dp[1][3]=1;
        dp[1][4]=1;
        dp[1][5]=1;
        dp[1][6]=1;
        
        for(int i=2;i<=n;i++){
            for(int j=i;j<=6*i;j++){
                double x1=0,x2=0,x3=0,x4=0,x5=0,x6=0;
                if(j>1){
                    x1=dp[i-1][j-1];
                }
                if(j>2){
                    x2=dp[i-1][j-2];
                }
                if(j>3){
                    x3=dp[i-1][j-3];
                }
                if(j>4){
                    x4=dp[i-1][j-4];
                }
                if(j>5){
                    x5=dp[i-1][j-5];
                }
                if(j>6){
                    x6=dp[i-1][j-6];
                }
                
                dp[i][j]=x1+x2+x3+x4+x5+x6;
            }
        }
        
        for(int i=n;i<=6*n;i++){
            AbstractMap.SimpleEntry<Integer, Double> entry=new AbstractMap.SimpleEntry<Integer, Double>(i,dp[n][i]/Math.pow(6,n));
            list.add(entry);
            
        }
        
        return list;
        
        
    }
}
