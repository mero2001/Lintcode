public class Solution {
    /*
     * @param candidates: A list of integers
     * @param target: An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        
        int len=candidates.length;
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        
        if(candidates==null||len==0||candidates[0]>target){//判断不同情况返回null
            return null;
        }
        
        Set<Integer> set=new HashSet<>();//去重
        for(int i=0;i<len;i++){
            set.add(candidates[i]);
        }
        
        
        int[] candi=new int[set.size()];
        int j=0;
        for(int i:set){
           candi[j]=i;
           j++;
        }
        Arrays.sort(candi);//排序

        List<Integer> combination=new ArrayList<Integer>();
        DFS(candi,0,combination,target,result);
        
        return result;
    }
    
    public void DFS(int[] candidates, int startIndex, List<Integer> combination, int target, List<List<Integer>> result){
        if(target==0){//target==0，往result里加
            List<Integer> tmp=new ArrayList<Integer>(combination);
            result.add(tmp);
            return;
        }
        if(target<0){
            return;
        }
        for(int i=startIndex;i<candidates.length;i++){

            if(target<candidates[i]){
                return;
            }
            target -= candidates[i];
            combination.add(candidates[i]);
            DFS(candidates,i,combination,target,result);// 从i 开始 说明 可以重复选取
            target+=candidates[i];// 恢复上一次的值
            combination.remove(combination.size()-1);//恢复上一次的值
        }
    }
    
}
