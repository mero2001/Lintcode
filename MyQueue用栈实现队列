public class MyQueue {
    public Stack<Integer> stack1;
    public Stack<Integer> stack2;
    public MyQueue() {//利用两个堆来实现队列
        // do intialization if necessary
        stack1=new Stack();
        stack2=new Stack();
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        stack1.push(element);
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        if(stack2.empty()){//将一个堆的元素倒进另一个堆，再取最上面的元素
           while(!stack1.empty()){
               int i=stack1.pop();
               stack2.push(i);
           } 
        }
        return stack2.pop();
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        if(stack2.empty()){//将一个堆的元素倒进另一个堆，再取最上面的元素
            while(!stack1.empty()){
                int i=stack1.pop();
                stack2.push(i);
            }
        }
        return stack2.peek();
    }
}
