public class Solution {
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public List<List<Integer>> permute(int[] nums) {
        // write your code here
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        List<Integer> list=new ArrayList();
        
        int len=nums.length;
        
        if(len==0){
            res.add(list);
            return res;
        }
        
        int[] visited=new int[len];
        DFS(res, list, visited, nums);
        return res;
    }
    
    public void DFS(List<List<Integer>> res, List<Integer> list, int[] visited, int[] nums){
        int len=nums.length;//每次重新计算len比起把len当为函数所需参数处理速度快
        if(len==list.size()){//当len==list.size()时，把list添加到res
            List<Integer> tmp=new ArrayList(list);
            res.add(tmp);
            return;
        }
        
        
        
        for(int i=0;i<len;i++){//递归遍历
            if(visited[i]==1){
            continue;
            }
            list.add(nums[i]);
            visited[i]=1;
            DFS(res,list,visited,nums);
            list.remove(list.size()-1);
            visited[i]=0;
        }
        
    }
}
