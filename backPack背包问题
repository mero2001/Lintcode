public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    public int backPack(int m, int[] A) {
        //参考http://blog.csdn.net/wutingyehe/article/details/46910103
        // write your code here
        int[][] dp = new int[A.length][m + 1];//动态规划矩阵
        /*for(int i = 0; i < A.length; i ++) {//背包空间为0时，不管要放第几个物品，可装满的背包空间为0.
            //该段循环语句可不写，因为整型数组元素默认为0
            dp[i][0] = 0;
        }*/
        for(int j = 1; j < m + 1; j++) {
            if(A[0] <= j) {//当第0个物品的空间小于等于当前背包空间j时
                dp[0][j] = A[0];//背包可装满的最大空间是第0个物品的体积
            }else {//当第0个物品的空间大于当前背包空间j时
                dp[0][j] = 0;//背包可装满的最大空间是0
            }
            for(int i = 1; i < A.length; i++) {//当放第1个到第A.length-1个物品时
                if(A[i] > j) {//若该物品所占空间大于背包总空间（无论怎样腾背包空间，该物品无法放入背包
                    dp[i][j] = dp[i - 1][j];//背包可装满的最大空间不变
                }else {//若该物品所占空间小于等于背包总空间,则需将背包空间腾出至少A[i]后，将该物品放入。放入新物品后背包最大可装满空间可能更大，也可能变小大，取大值作为背包空间为j且放第i个物品时可以有的最大可装满空间。
                    dp[i][j] = Math.max(dp[i-1][j - A[i]] + A[i], dp[i - 1][j]);
                }
            }
        }
        return dp[A.length - 1][m];
    }
}
