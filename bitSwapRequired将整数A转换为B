public class Solution {
    /*
     * @param a: An integer
     * @param b: An integer
     * @return: An integer
     */
    public int bitSwapRequired(int a, int b) {
        // write your code here
        int[] numa=num(a);
        int[] numb=num(b);
        System.out.println("numa"+Arrays.toString(numa));
        System.out.println("numb"+Arrays.toString(numb));
        int count=0;
        for(int i=0;i<32;i++){//判断数组对应位是否相同
            if(numa[i]!=numb[i]){
                count++;
            }
        }
        return count;
        
    }
    public int[] num(int a){//定义返回二进制的函数
        int[] numa=new int[32];
        boolean flag=true;
        boolean flag2=true;
        if(a<0){
            flag=false;
        }
        if(a==-2147483648){
            a=2147483647;
            flag2=false;
        }
        a=Math.abs(a);
        System.out.println(a);
        for(int i=0;i<31;i++){//通过除以2的30-i次方是否大于0来判断该位值
            if(a/(int)Math.pow(2,30-i)>0){
                numa[i+1]=1;
                a=a-(int)Math.pow(2,30-i);
            }
            
        }
        System.out.println("numa1:"+Arrays.toString(numa));
        if(flag){
            return numa;
        }
        for(int i=0;i<32;i++){//如果为负数则全部取反
            if(numa[i]==1){
                numa[i]=0;
                continue;
            }
            if(numa[i]==0){
                numa[i]=1;
                continue;
            }
        }
        System.out.println(Arrays.toString(numa));
        if(!flag2){
           return numa; 
        }
        
        
        for(int i=31;i>=0;i--){//如果是负数需要在取反后加一
            if(numa[i]==1){
                numa[i]=0;
                continue;
            }
            if(numa[i]==0){
                numa[i]=1;
                break;
            }
        }
        return numa;
    }
};
