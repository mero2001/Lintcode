public class Solution {
    /*
     * @param s: A string
     * @param k: An integer
     * @return: An integer
     */
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        // write your code here
        if(k==0){
            return 0;
        }
        if(k>=24){
            return s.length();
        }
        int result = 0;//双重指针
        int left = 0;
        //声明一个HashMap，用来存储k Distinct，还可以根据value用来判断元素是否可以删除
        HashMap<Character, Integer> map = new HashMap<>();
        for (int right = 0; right < s.length(); right++) {
            //右指针依次把字符串中的字符放到map中
            map.put(s.charAt(right),right);
            //当map元素大于k Distinct时，得到满足要求的子字符串
            while (map.size() > k) {
                // 删除最左的字符，删除成功，则退出循环
                char leftChar = s.charAt(left);
                if (map.get(leftChar) == left) {
                    map.remove(leftChar);
                }
                // 左指针右移
                left++;
            }
            //子结果即左右指针之间的长度
            int subResult = right - left + 1;
            //结果取最大
            result = Math.max(result,subResult);
        }
        return result;
    
        /*int len=s.length();超时
        int max=0;
        System.out.println("k:"+k);
        for(int i=0;i<len-1;i++){
            Set<Character> set=new HashSet();
            set.add(s.charAt(i));
            int j=i+1;
            
            while(j<len){
                set.add(s.charAt(j));
                j++;
                if(set.size()>k){
                    j--;
                    break;
                }
                //System.out.println("set.size:"+set.size());
            }
            //System.out.println("i:"+i);
            //System.out.println("j:"+j);
            if((j-i)>max){
                max=j-i;
                //restr=s.substring(i,j);
            }
        }
        return max;*/
    }
}
