public class Solution {
    /*
     * @param n: Given the range of numbers
     * @param k: Given the numbers of combinations
     * @return: All the combinations of k numbers out of 1..n
     */
    public List<List<Integer>> combine(int n, int k) {
        // write your code here
        List<List<Integer>> result=new ArrayList<List<Integer>>();//创建返回结果List
        
        List<Integer> list=new ArrayList();
        
        int start=1;
        if(n<=0||k<=0||k>n){//判断极端情况，返回null
            return null;
        }
        DFS(result,list,n,k,start);
    
        return result;
    }
    
    public void DFS(List<List<Integer>> result,List<Integer> list,int n,int k,int start){
        if(list.size()==k){//当list长度为k时，则往result中添加该list
            List<Integer> tmp=new ArrayList<Integer>(list);
            result.add(tmp);//注意不能直接添加list，必须先把它赋值给另一个tmp list，因为后续有list.remove操作
            return;
        }
        
        for(int i=start;i<=n;i++){//循环不断组合各种元素
            list.add(i);
            DFS(result,list,n,k,i+1);
            list.remove(list.size()-1);
        }
    }
}
