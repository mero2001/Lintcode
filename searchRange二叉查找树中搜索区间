/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param root: param root: The root of the binary search tree
     * @param k1: An integer
     * @param k2: An integer
     * @return: return: Return all keys that k1<=key<=k2 in ascending order
     */
    public List<Integer> searchRange(TreeNode root, int k1, int k2) {
        // write your code here
        List<Integer> list=new ArrayList<Integer>();
        
        list=sr(root,list,k1,k2);
        
        return list;
        
    }
    
    public List<Integer> sr(TreeNode root, List<Integer> list, int k1, int k2){
        if(root==null){//中序遍历查找
            return list;
        }
        
        if(root.left!=null){
            list=sr(root.left,list,k1,k2);
        }
        if(root.val>=k1&&root.val<=k2){
            list.add(root.val);
        }
        if(root.right!=null){
            list=sr(root.right,list,k1,k2);
        }
        
        return list;
    }
        
        
       /* List<Integer> list=new ArrayList<Integer>();
        list=inorder(list,root);
        int len=list.size();
        System.out.println("len:"+len);
        List<Integer> reList=new ArrayList<Integer>();
        
        for(int i=0;i<len;i++){
            int tmp=list.get(i);
            if(tmp>=k1&&tmp<=k2){
                System.out.println(tmp);
                reList.add(tmp);
            }
        }
        return reList;*/
        
    
    
    /*public List<Integer> inorder(List<Integer> list,TreeNode root){
        if(root==null){
            return list;
        }
        
        if(root.left!=null){
            list.addAll(inorder(list,root.left));
            System.out.println("root.left"+root.left.val);
        }
        
        list.add(root.val);
        System.out.println("root"+root.val);
        if(root.right!=null){
            list.addAll(inorder(list,root.right));
        }
        return list;
    }*/
}
