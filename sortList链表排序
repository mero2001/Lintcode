/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param head: The head of linked list.
     * @return: You should return the head of the sorted linked list, using constant space complexity.
     */
    public ListNode sortList(ListNode head) {
        // write your code here
        if(head==null||head.next==null){//判断head==null||head.next==null的情况
            return head;
        }
        
        ListNode dummy=new ListNode(-1);
        dummy.next=head;
        ListNode slow=dummy;
        ListNode fast=head;
        
        while(fast!=null&&fast.next!=null){//快慢指针查找中点
            slow=slow.next;
            fast=fast.next.next;
        }
        
        ListNode bhead=slow.next;
        slow.next=null;
        ListNode ahead=dummy.next;
        ListNode rhead=null;
        /*System.out.println(ahead.val);
        System.out.println(bhead.val);*/
        
        rhead=mergeList(sortList(ahead),sortList(bhead));//递归并采用mergeList对左半段和右半段融合排序
        return rhead;
    }
    
    public ListNode mergeList(ListNode p,ListNode q){
        
        if(p==null){//判断p==null和q==null的情况
            return q;
        }
        if(q==null){
            return p;
        }
        ListNode newhead=new ListNode(-1);//新建链表存储融合后链表
        ListNode temp=newhead;
        while(p!=null&&q!=null){
            if(p.val<q.val){
                temp.next=p;
                p=p.next;
            }
            else if(p.val>=q.val){
                temp.next=q;
                q=q.next;
            }
            temp=temp.next;
        }
        if(p==null){//当p==null而q不为null时
            temp.next=q;
            return newhead.next;
        }
        if(q==null){//当q==null而p不为null时
            temp.next=p;
            return newhead.next;
        }
        return newhead.next;
        
        
    }
}
