public class Solution {
    /*
     * @param n: An integer
     * @return: the nth prime number as description.
     */
    public int nthUglyNumber(int n) {
        // write your code here
        //直接寻找丑数，由丑数的定义可知，任何一个丑数都是2^i * 3^j * 5^m这种形式的，因此不断寻找丑数，将他们按从小到大的顺序进行排列，直到第n个即为结果。

        //首先定义一个数组存放丑数，认为1是丑数，则初始化数组num[0] = 1，然后从2,3,5这三个种子中挑选，选择num[0]*2，num[0]*3，num[0]*5中最小的数为新的丑数，显然应该选择2，即num[1] = 2，然后在从2,3,5中选择，这时应该是从num[1]*2，num[0]*3，num[0]*5中进行选择，显然选择3，即num[2] = 3，然后再从num[1]*2，num[1]*3，num[0]*5中选择最小的，选择2，即num[3] = 4，依次进行如下操作，得到最终的结果。
        int[] uglys=new int[n];
        int num2=0;
        int num3=0;
        int num5=0;
        uglys[0]=1;
        for(int i=1;i<n;i++){
            uglys[i]=Math.min(Math.min(uglys[num2]*2,uglys[num3]*3),uglys[num5]*5);
            if(uglys[i]/uglys[num2]==2){//这几段代码的意思是找出到底是2,3,5中哪个种子计算出的ugly[i]，当然，有可能有多个种子，比如ugly[num_2]*2 == ugly[num_3]*3时，需要把num_2++，并且要使num_3++。因此这里不能使用if-else，要全部使用if进行判断。
                num2++;
            }
            if(uglys[i]/uglys[num3]==3){
                num3++;
            }
            if(uglys[i]/uglys[num5]==5){
                num5++;
            }
        }
        
        return uglys[n-1];
    }
}
